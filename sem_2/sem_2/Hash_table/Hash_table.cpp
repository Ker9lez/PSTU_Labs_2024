#include <iostream>
#include <string>
#include <cmath>
#include <iomanip>

using namespace std;

const int TABLE_SIZE = 100;

struct BankAccount {
    string fullName;
    int accountNumber;
    double amount;
    bool isOccupied;
};

struct HashTable {
    BankAccount* table;
    int size;
    int collisions;
};

int hashFunction(int key, int tableSize) {
    double A = (sqrt(5) - 1) / 2;
    double val = key * A;
    double fractional = val - floor(val);
    return (int)(tableSize * fractional);
}

int rehash(int hash, int attempt, int tableSize) {
    return (hash + attempt) % tableSize;
}

void initHashTable(HashTable* ht, int tableSize) {
    ht->size = tableSize;
    ht->collisions = 0;
    ht->table = new BankAccount[tableSize];
    for (int i = 0; i < tableSize; i++) {
        ht->table[i].isOccupied = false;
    }
}

void freeHashTable(HashTable* ht) {
    delete[] ht->table;
}

void insertToHashTable(HashTable* ht, int accountNumber, const string& fullName, double amount) {
    int hash = hashFunction(accountNumber, ht->size);
    int attempt = 0;

    while (attempt < ht->size) {
        int index = rehash(hash, attempt, ht->size);

        if (!ht->table[index].isOccupied) {
            ht->table[index].fullName = fullName;
            ht->table[index].accountNumber = accountNumber;
            ht->table[index].amount = amount;
            ht->table[index].isOccupied = true;
            if (attempt > 0) ht->collisions += attempt;
            return;
        }
        attempt++;
    }

    ht->collisions++;
}

BankAccount* searchInHashTable(HashTable* ht, int accountNumber) {
    int hash = hashFunction(accountNumber, ht->size);
    int attempt = 0;

    while (attempt < ht->size) {
        int index = rehash(hash, attempt, ht->size);

        if (!ht->table[index].isOccupied) {
            return nullptr;
        }

        if (ht->table[index].accountNumber == accountNumber) {
            return &ht->table[index];
        }

        attempt++;
    }

    return nullptr;
}

int main() {
    setlocale(LC_ALL, "Russian");
    struct {
        string fullName;
        double amount;
    } accountsData[100] = {
        {"Смирнов Алексей Владимирович", 12500.50},
        {"Ковалева Анна Сергеевна", 18765.43},
        {"Петров Дмитрий Игоревич", 24500.00},
        {"Иванова Екатерина Михайловна", 32560.75},
        {"Сидоренко Артем Викторович", 41235.90},
        {"Морозова Ольга Дмитриевна", 52345.25},
        {"Кузнецов Павел Александрович", 61500.80},
        {"Волкова Ирина Петровна", 72345.15},
        {"Лебедев Максим Олегович", 83456.20},
        {"Новикова Татьяна Владимировна", 91234.65},
        {"Федоров Андрей Николаевич", 102345.70},
        {"Герасимова Надежда Сергеевна", 115678.35},
        {"Макаров Иван Алексеевич", 123456.80},
        {"Антонова Светлана Викторовна", 132567.45},
        {"Павлов Константин Дмитриевич", 145678.90},
        {"Зайцева Марина Олеговна", 153456.25},
        {"Семенов Артур Эдуардович", 162345.60},
        {"Медведева Юлия Андреевна", 173456.95},
        {"Орлов Станислав Борисович", 184567.30},
        {"Романова Виктория Геннадьевна", 192345.65},
        {"Борисов Григорий Петрович", 203456.00},
        {"Киселева Анастасия Игоревна", 215678.35},
        {"Гусев Вадим Сергеевич", 223456.70},
        {"Титова Елена Владимировна", 234567.05},
        {"Данилов Роман Артемович", 245678.40},
        {"Соколова Дарья Михайловна", 253456.75},
        {"Белов Александр Юрьевич", 262345.10},
        {"Фролова Кристина Олеговна", 273456.45},
        {"Егоров Виталий Николаевич", 284567.80},
        {"Горбачева Людмила Васильевна", 292345.15},
        {"Крылов Денис Андреевич", 303456.50},
        {"Степанова Валерия Денисовна", 315678.85},
        {"Тарасов Артем Витальевич", 323456.20},
        {"Власова Ангелина Сергеевна", 334567.55},
        {"Миронов Евгений Геннадьевич", 345678.90},
        {"Савельева Оксана Андреевна", 353456.25},
        {"Жуков Владислав Олегович", 362345.60},
        {"Ларина Тамара Ивановна", 373456.95},
        {"Николаев Сергей Владимирович", 384567.30},
        {"Беляева Инна Петровна", 392345.65},
        {"Громов Антон Дмитриевич", 403456.00},
        {"Козлова Вероника Станиславовна", 415678.35},
        {"Тимофеев Аркадий Викторович", 423456.70},
        {"Маркова Диана Олеговна", 434567.05},
        {"Сорокин Валерий Игоревич", 445678.40},
        {"Фомина Галина Николаевна", 453456.75},
        {"Комаров Руслан Артемович", 462345.10},
        {"Ильина Мария Сергеевна", 473456.45},
        {"Баранов Игорь Владимирович", 484567.80},
        {"Ефимова Наталья Дмитриевна", 492345.15},
        {"Галкин Петр Олегович", 503456.50},
        {"Коновалова Алла Викторовна", 515678.85},
        {"Логинов Денис Андреевич", 523456.20},
        {"Родионова Елизавета Сергеевна", 534567.55},
        {"Щукин Вадим Николаевич", 545678.90},
        {"Терентьева Ирина Олеговна", 553456.25},
        {"Макеев Артем Дмитриевич", 562345.60},
        {"Орехова Светлана Владимировна", 573456.95},
        {"Зимин Геннадий Петрович", 584567.30},
        {"Суханова Ксения Андреевна", 592345.65},
        {"Гордеев Роман Игоревич", 603456.00},
        {"Лобанова Анна Викторовна", 615678.35},
        {"Кудрявцев Алексей Сергеевич", 623456.70},
        {"Широкова Ольга Дмитриевна", 634567.05},
        {"Носков Владимир Олегович", 645678.40},
        {"Михайлова Татьяна Николаевна", 653456.75},
        {"Еремин Станислав Артемович", 662345.10},
        {"Калинина Екатерина Сергеевна", 673456.45},
        {"Быков Андрей Владимирович", 684567.80},
        {"Симонова Вероника Дмитриевна", 692345.15},
        {"Лаптев Илья Олегович", 703456.50},
        {"Горшкова Надежда Андреевна", 715678.85},
        {"Михеев Дмитрий Викторович", 723456.20},
        {"Куприянова Любовь Сергеевна", 734567.55},
        {"Сазонов Артур Николаевич", 745678.90},
        {"Рябова Инна Олеговна", 753456.25},
        {"Нестеров Владислав Дмитриевич", 762345.60},
        {"Шарапова Марина Викторовна", 773456.95},
        {"Гребенщиков Павел Андреевич", 784567.30},
        {"Овчинникова Елена Игоревна", 792345.65},
        {"Зуев Константин Сергеевич", 803456.00},
        {"Токарева Анастасия Владимировна", 815678.35},
        {"Шишкин Артем Олегович", 823456.70},
        {"Лукина Виктория Дмитриевна", 834567.05},
        {"Королев Сергей Николаевич", 845678.40},
        {"Бирюкова Наталья Артемовна", 853456.75},
        {"Афанасьев Иван Сергеевич", 862345.10},
        {"Голубева Ольга Викторовна", 873456.45},
        {"Рогов Андрей Дмитриевич", 884567.80},
        {"Селезнева Ирина Олеговна", 892345.15},
        {"Суворов Денис Андреевич", 903456.50},
        {"Кузьмина Тамара Сергеевна", 915678.85},
        {"Тихонов Артур Владимирович", 923456.20},
        {"Комарова Елена Дмитриевна", 934567.55},
        {"Шевцов Виктор Олегович", 945678.90},
        {"Лаптева Мария Николаевна", 953456.25},
        {"Гущин Алексей Артемович", 962345.60},
        {"Федосеева Анна Сергеевна", 973456.95},
        {"Кошелев Владимир Викторович", 984567.30},
        {"Мартынова Светлана Дмитриевна", 992345.65}
    };

    HashTable ht;
    initHashTable(&ht, TABLE_SIZE);
    for (int i = 0; i < 89; i++) {
        int accountNumber = 40000 + i; // Номера счетов от 40000 до 40088
        insertToHashTable(&ht, accountNumber, accountsData[i].fullName, accountsData[i].amount);
    }
    cout << "Хеш-таблица создана. Коллизии при вставке: " << ht.collisions << endl;
    while (true) {
        cout << "\nВведите номер счета (40000-40088) или 0 для выхода: ";
        int accountNumber;
        cin >> accountNumber;

        if (accountNumber == 0) break;

        if (accountNumber < 40000 || accountNumber > 40088) {
            cout << "Некорректный номер счета!" << endl;
            continue;
        }
        BankAccount* account = searchInHashTable(&ht, accountNumber);
        if (account) {
            cout << "Найден счет:" << endl;
            cout << "ФИО: " << account->fullName << endl;
            cout << "Номер счета: " << account->accountNumber << endl;
            cout << "Сумма: " << fixed << setprecision(2) << account->amount << " руб." << endl;
        }
        else {
            cout << "Счет не найден!" << endl;
        }
    }
    freeHashTable(&ht);

    return 0;
}